name: ci

on:
  push:
    branches: main

  workflow_dispatch:
    inputs:
      debug_enabled:
        description: "Enable tmate debug"
        type: boolean
        default: "false"

jobs:
  info:
    runs-on: ubuntu-latest

    timeout-minutes: 5

    permissions:
      contents: read

    outputs:
      branch_tag_kebab: ${{ steps.tags.outputs.branch_tag_kebab }}
      branch_tag_screaming: ${{ steps.tags.outputs.branch_tag_screaming}}
      image_latest_artefact: ${{ steps.artefacts.outputs.image_latest_artefact}}
      image_latest_tag: ${{ steps.tags.outputs.image_latest_tag }}
      image_version_artefact: ${{ steps.artefacts.outputs.image_version_artefact}}
      image_version_tag: ${{ steps.tags.outputs.image_version_tag }}
      short_sha: ${{ steps.tags.outputs.short_sha }}
      version_slug: ${{ steps.tags.outputs.version_slug }}
      gcp_environment: ${{ steps.get_gcp_variables.outputs.gcp_environment}}
      gcp_project: ${{ steps.get_gcp_variables.outputs.gcp_project}}
      gcp_project_number: ${{ steps.get_gcp_variables.outputs.gcp_project_number}}
      gcp_region: ${{ steps.get_gcp_variables.outputs.gcp_region}}
      gcp_resource_affix: ${{ steps.get_gcp_variables.outputs.gcp_resource_affix}}
      gcp_service: ${{ steps.get_gcp_variables.outputs.gcp_service}}
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install poetry
        uses: snok/install-poetry@v1

      - name: Get version
        id: get_version
        run: |
          echo "version=$(poetry version -s)" >> $GITHUB_OUTPUT
          echo "version=$(poetry version -s)" >> $GITHUB_OUTPUT

        # Hard coded variables for now, we need to look into using terraform within the CI/CD processes
      - name: Get GCP Variables
        id: get_gcp_variables
        run: |
          echo "gcp_project=octue-exa" >> $GITHUB_OUTPUT
          echo "gcp_project_number=1073024407725" >> $GITHUB_OUTPUT
          echo "gcp_region=europe-west1" >> $GITHUB_OUTPUT
          echo "gcp_resource_affix=exa" >> $GITHUB_OUTPUT
          echo "gcp_environment=main" >> $GITHUB_OUTPUT
          echo "gcp_service=foo-fighting-service" >> $GITHUB_OUTPUT

      - name: Get slugified branch name, resource names, and docker image tags
        id: tags
        run: |
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          BRANCH_TAG_KEBAB=$(echo ${GITHUB_REF#refs/heads/} | iconv -c -t ascii//TRANSLIT | sed -E 's/[~^]+//g' | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | tr A-Z a-z)
          echo "branch_tag_kebab=$BRANCH_TAG_KEBAB" >> $GITHUB_OUTPUT
          BRANCH_TAG_SCREAMING=$(echo $BRANCH_TAG_KEBAB | tr '[:lower:]' '[:upper:]'  | tr - _)
          echo "branch_tag_screaming=$BRANCH_TAG_SCREAMING" >> $GITHUB_OUTPUT
          VERSION=${{steps.get_version.outputs.version}}
          if [ "$BRANCH_TAG_KEBAB" = "main" ]; then
            TAG_VERSION=$VERSION
          else
            TAG_VERSION="unreleased"
          fi
          VERSION_SLUG=$(echo $TAG_VERSION | tr . -)
          echo "version_slug=$VERSION_SLUG" >> $GITHUB_OUTPUT
          echo "image_version_tag=$BRANCH_TAG_KEBAB-$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "image_latest_tag=$BRANCH_TAG_KEBAB-latest" >> $GITHUB_OUTPUT

      - name: Set image artefact addresses
        id: artefacts
        run: |
          echo "image_version_artefact=${{steps.get_gcp_variables.outputs.gcp_region}}-docker.pkg.dev/${{steps.get_gcp_variables.outputs.gcp_project}}/${{steps.get_gcp_variables.outputs.gcp_resource_affix}}/${{steps.get_gcp_variables.outputs.gcp_service}}:${{ steps.tags.outputs.image_version_tag}}" >> $GITHUB_OUTPUT
          echo "image_latest_artefact=${{steps.get_gcp_variables.outputs.gcp_region}}-docker.pkg.dev/${{steps.get_gcp_variables.outputs.gcp_project}}/${{steps.get_gcp_variables.outputs.gcp_resource_affix}}/${{steps.get_gcp_variables.outputs.gcp_service}}:${{ steps.tags.outputs.image_latest_tag}}" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: info
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Show input values
        run: |
          echo "GitHub event_name: ${{ github.event_name }}"
          echo "GitHub event inputs debug_enabled: ${{ github.event.inputs.debug_enabled }}"
          echo "Docker image_latest_artefact: ${{ needs.info.outputs.image_latest_artefact }}"
          echo "Docker image_latest_tag: ${{ needs.info.outputs.image_latest_tag }}"
          echo "Docker image_version_artefact: ${{ needs.info.outputs.image_version_artefact }}"
          echo "Docker image_version_tag: ${{ needs.info.outputs.image_version_tag }}"
          echo "Repository branch_tag_kebab: ${{ needs.info.outputs.branch_tag_kebab }}"
          echo "Repository branch_tag_screaming: ${{ needs.info.outputs.branch_tag_screaming }}"
          echo "Repository short_sha: ${{ needs.info.outputs.short_sha }}"
          echo "Repository version: ${{ needs.info.outputs.version }}"
          echo "Repository version_slug: ${{ needs.info.outputs.version_slug }}"
          echo "GCP gcp_environment: ${{ needs.info.outputs.gcp_environment }}"
          echo "GCP gcp_project: ${{ needs.info.outputs.gcp_project }}"
          echo "GCP gcp_project_number: ${{ needs.info.outputs.gcp_project_number }}"
          echo "GCP gcp_region: ${{ needs.info.outputs.gcp_region }}"
          echo "GCP gcp_resource_affix: ${{ needs.info.outputs.gcp_resource_affix }}"
          echo "GCP gcp_service: ${{ needs.info.outputs.gcp_service }}"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Authenticate with GCP Workload Identity
        id: auth
        uses: google-github-actions/auth@v0
        with:
          # NOTE: If setting create_credentials_file=true, .dockerignore file must include `gha-creds-*.json` to avoid baking these credentials into build
          create_credentials_file: true
          workload_identity_provider: projects/${{ needs.info.outputs.gcp_project_number }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider
          service_account: github-actions-ci@${{ needs.info.outputs.gcp_project }}.iam.gserviceaccount.com

      - name: Setup gcloud
        uses: "google-github-actions/setup-gcloud@v0"

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker europe-west1-docker.pkg.dev

      - name: Setup tmate session [DEBUG]
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled == 'true'}}
        uses: mxschmitt/action-tmate@v3

      - name: Get default Octue Cloud Run Dockerfile
        run: wget https://raw.githubusercontent.com/octue/octue-sdk-python/devops/improve-deployment-dockerfile/octue/cloud/deployment/google/cloud_run/Dockerfile

      - name: Push container with latest and version tags
        # Note: We don't push containers with shas because we'd end up with terabytes in storage (an image for every commit)
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64
          file: ./Dockerfile
          push: true
          tags: |
            ${{ needs.info.outputs.image_version_artefact}}
            ${{ needs.info.outputs.image_latest_artefact}}

      - name: Get service name
        id: service_name
        run: |
          echo "service_name=${{ needs.info.outputs.gcp_resource_affix }}-${{ needs.info.outputs.gcp_service }}" >> $GITHUB_OUTPUT

      - name: Deploy to Cloud Run service
        id: deploy_service
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          env_vars: |
            OCTUE_SERVICE_NAMESPACE=octue
            OCTUE_SERVICE_NAME=${{ steps.service_name.outputs.service_name }}
            OCTUE_SERVICE_REVISION_TAG=${{ needs.info.outputs.version_slug }}
            COMPUTE_PROVIDER=GOOGLE_CLOUD_RUN
          service: ${{ steps.service_name.outputs.service_name }}
          image: ${{ needs.info.outputs.image_version_artefact }}
          region: ${{ needs.info.outputs.gcp_region }}
          tag: v${{ needs.info.outputs.version_slug }}

      - name: Show deployed service URL
        run: |
          echo "${{ steps.deploy_service.outputs.url }}"

      - name: Create topic and subscription
        uses: octue/create-push-subscription@0.1.0
        with:
          project_name: octue-exa
          service_namespace: octue
          service_name: exa-foo-fighting-service
          revision_tag: ${{ needs.info.outputs.version_slug }}
          push_endpoint: ${{ steps.deploy_service.outputs.url }}
