name: ci

on:
  push:
  #    branches: main

  workflow_dispatch:
    inputs:
      debug_enabled:
        description: "Enable tmate debug"
        type: boolean
        default: "false"

jobs:
  info:
    runs-on: ubuntu-latest

    timeout-minutes: 5

    permissions:
      contents: read

    # TODO: Update spelling of "artefact" to "artifact" when GitHub actions manages to run the version of the `octue/get-deployment-info` action we're asking it to.
    outputs:
      branch_tag_kebab: ${{ steps.get-deployment-info.outputs.branch_tag_kebab }}
      branch_tag_screaming: ${{ steps.get-deployment-info.outputs.branch_tag_screaming }}
      image_latest_artifact: ${{ steps.get-deployment-info.outputs.image_latest_artefact }}
      image_latest_tag: ${{ steps.get-deployment-info.outputs.image_latest_tag }}
      image_version_artifact: ${{ steps.get-deployment-info.outputs.image_version_artefact }}
      image_version_tag: ${{ steps.get-deployment-info.outputs.image_version_tag }}
      short_sha: ${{ steps.get-deployment-info.outputs.short_sha }}
      gcp_project_name: ${{ steps.get-deployment-info.outputs.gcp_project_name }}
      gcp_project_number: ${{ steps.get-deployment-info.outputs.gcp_project_number }}
      gcp_region: ${{ steps.get-deployment-info.outputs.gcp_region}}
      gcp_resource_affix: ${{ steps.get-deployment-info.outputs.gcp_resource_affix }}
      gcp_service_name: ${{ steps.get-deployment-info.outputs.gcp_service_name }}
      gcp_environment: ${{ steps.get-deployment-info.outputs.gcp_environment }}
      version_slug: ${{ steps.get-deployment-info.outputs.version_slug }}
      version: ${{ steps.get-deployment-info.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install poetry
        uses: snok/install-poetry@v1

      - name: Get deployment info
        id: get-deployment-info
        uses: octue/get-deployment-info@0.1.3
        with:
          gcp_project_name: octue-exa
          gcp_project_number: 1073024407725
          gcp_region: europe-west1
          gcp_resource_affix: exa
          gcp_service_name: foo-fighting-service
          gcp_environment: main

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: info
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Authenticate with GCP Workload Identity
        id: auth
        uses: google-github-actions/auth@v1
        with:
          # NOTE: If setting create_credentials_file=true, .dockerignore file must include `gha-creds-*.json` to avoid baking these credentials into build
          create_credentials_file: true
          workload_identity_provider: projects/${{ needs.info.outputs.gcp_project_number }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider
          service_account: github-actions-ci@${{ needs.info.outputs.gcp_project_name }}.iam.gserviceaccount.com

      - name: Setup gcloud
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker ${{ needs.info.outputs.gcp_region }}-docker.pkg.dev

      - name: Setup tmate session [DEBUG]
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled == 'true'}}
        uses: mxschmitt/action-tmate@v3

      - name: Push container with latest and version tags
        # Note: We don't push containers with shas because we'd end up with terabytes in storage (an image for every commit)
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64
          file: .gcloud/cloud-run/Dockerfile
          push: true
          tags: |
            ${{ needs.info.outputs.image_version_artifact}}
            ${{ needs.info.outputs.image_latest_artifact}}

      - name: Deploy to Cloud Run service
        id: deploy_service
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          env_vars: |
            OCTUE_SERVICE_NAMESPACE=octue
            OCTUE_SERVICE_NAME=$${{ needs.info.outputs.gcp_resource_affix }}-${{ needs.info.outputs.gcp_service }}
            OCTUE_SERVICE_REVISION_TAG=${{ needs.info.outputs.version }}
            COMPUTE_PROVIDER=GOOGLE_CLOUD_RUN
          service: ${{ needs.info.outputs.gcp_resource_affix }}-${{ needs.info.outputs.gcp_service }}
          image: ${{ needs.info.outputs.image_version_artifact }}
          region: ${{ needs.info.outputs.gcp_region }}
          tag: v${{ needs.info.outputs.version_slug }}

      - name: Show deployed service URL
        run: |
          echo "${{ steps.deploy_service.outputs.url }}"

      - name: Create topic and subscription
        uses: octue/create-push-subscription@0.3.0.beta-0
        with:
          project_name: ${{ needs.info.outputs.gcp_project_name }}
          service_namespace: octue
          service_name: ${{ needs.info.outputs.gcp_resource_affix }}-${{ needs.info.outputs.gcp_service }}
          service_revision_tag: ${{ needs.info.outputs.version }}
          push_endpoint: ${{ steps.deploy_service.outputs.url }}
